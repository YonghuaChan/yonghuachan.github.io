<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Async IO in Python</title>
      <link href="/2020/01/06/Async-IO-in-Python/"/>
      <url>/2020/01/06/Async-IO-in-Python/</url>
      
        <content type="html"><![CDATA[<p>本文将会解释 Python 的异步模块 asyncio 的概念和基本用法。</p><a id="more"></a><p>Async IO 是一种并发编程设计，在 Python 中得到了专门的支持，从 Python 3.4迅速发展到3.7，甚至可能更高。</p><p>以下你将会涉及的内容</p><ul><li>异步 IO (Asynchronous IO | async IO) : 一种与语言无关的范例(模型) ，其实现跨多种编程语言</li><li>async/await: 两个用于定义协同程序的新 Python 关键字</li><li>asyncio: Python 包，它为运行和管理协同程序提供了基础和 API</li></ul><p>协同程序(专门的生成器函数)是 Python 中异步 IO 的核心，稍后我们将深入讨论它们。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>工作环境</p><ol><li>在本文中，我使用术语 async IO 来表示异步 IO 的语言无关设计，而 asyncio 指的是 Python 包。</li><li>你需要 Python 3.7或者更高版本来完整地阅读本文，还需要 aiohttp 和 aiofiles 包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>$ python3.7 -m venv ./py37async</span><br><span class="line"><span class="meta">&gt;</span>$ source ./py37async/bin/activate#Windows:.\py37async\Scripts\activate.bat</span><br><span class="line"><span class="meta">&gt;</span>$ pip install --upgrade pip aiohttp aiofiles  # Optional: aiodns</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="在Async-IO前世今生"><a href="#在Async-IO前世今生" class="headerlink" title="在Async IO前世今生"></a>在Async IO前世今生</h2><h3 id="Async-IO用在什么地方"><a href="#Async-IO用在什么地方" class="headerlink" title="Async IO用在什么地方?"></a>Async IO用在什么地方?</h3><p>Async IO 比起多进程和线程, 知名度会更低一点, 来一点一点了解。</p><p><strong>Parallelism(并行性)</strong>: 在同一时间执行多个操作。<br><strong>Multiprocessing(多进程)</strong>: 是一种实现<strong>Parallelism(并行性)</strong>的手段, 它需要在计算机的中央处理单元(cpu 或内核)上分配任务。 多进程非常适合处理CPU密集型(CPU-bound)的任务: 非常依赖循环或者数学计算通常属于这一类。<br><strong>Concurrency(并发性)</strong>是一个比并行性稍宽泛的术语。 它表明多个任务能够以重叠的方式运行。 (有一种说法是，并发并不意味着并行。)</p><p>线程是一种并发执行模型，多个线程轮流执行任务。 一个进程可以包含多个线程。 因为全局解释器锁(GIL)的关系，Python 与线程的关系非常复杂，但这超出了本文的范围。</p><p>了解线程处理的重要性在于，它更适合处理IO密集型(IO-bound)相关的任务。 当计算机内核工作从开始到结束时，主要的消耗都在输入 / 输出上面。</p><p>总结一下，<strong>Concurrency(并发性)</strong>包括Multiprocessing(多进程)(适合处理CPU密集型的任务)和threading(线程)(适合处理IO密集型的任务)。 Multiprocessing(多进程)是Parallelism(并行性)的一种形式，Parallelism(并行性)是<strong>Concurrency(并发性)</strong>的一种特定类型(子集)。 Python multiprocessing、threading 和 concurrent.futures包 为这两者提供了长期的支持。</p><p>现在是时候加入一个新成员了。 在过去的几年中，一个分离的设计已经更加全面地内置到 CPython 中: asynchronous IO(异步 IO)，通过标准库的 asyncio 包和新的 async 和 await 关键字启用。<br>需要澄清的是，asynchronous IO 并不是一个新发明的概念，它已经存在或者正在被构建到其他语言和运行时环境中，比如 Go、 C# 或者 Scala。</p><p>Python 文档将 asyncio 包称为编写并发代码的库。 但是，异步 IO 不是线程，也不是多进程。 它不是建立在这两者之上的。</p><p>实际上，async IO 是一种单线程、单进程的设计: 它使用cooperative multitasking(协作多任务)，本笔记结束时你将充实这个术语。 换句话说，尽管在单个进程中使用单个线程，async IO 可以给人一种并发的感觉。 协同程序(async IO 的一个主要特性)可以并发调度，但它们本身并不是并发的。</p><p>重申一下，async IO 是并发编程的一种风格，但它不是Parallelism。 与Multiprocessing相比，它更接近于threading，但与这两者非常不同，是并发技巧中的一个独立成员。</p><p>还剩下一个问题, asynchronous是什么意思? 要注意下面asynchronous(异步)的介绍并不是一个严格的定义, 但是我们可以如此描述:</p><ul><li><p>Asynchronous routines(异步例程)可以在等待最终结果时“暂停” ，同时让其他routines运行</p></li><li><p>通过上述机制，异步代码促进了并发执行。 换句话说，异步代码给出了并发的外观和感觉</p><p>这里有一个图表把它们放在一起。 白色术语代表概念，绿色术语代表实施或生效的方式 </p></li></ul><div align="center"><img src="/2020/01/06/Async-IO-in-Python/concurrency_between_others.png"></div><p>ok, 对于并发编程模型之间的比较先停止。 这个笔记主要关注async IO的子组件、如何使用它以及围绕它涌现的 api。 要彻底探索threading与multiprocessing相对于async IO的区别，请查看 Jim Anderson 对 Python 中并发性的概述: <a href="https://realpython.com/python-concurrency/" target="_blank" rel="noopener">overview of concurrency in Python</a></p><h3 id="async-IO-解释"><a href="#async-IO-解释" class="headerlink" title="async IO 解释"></a>async IO 解释</h3><p> 异步输入输出一开始看起来似乎是违反直觉和矛盾的。 搞并发代码的东西如何使用一个线程和一个 CPU 核心？ 下面这个例子很好地解释了一切: </p><blockquote><p>陈刀仔之徒卢本伟举办了一场斗地主争霸赛，在这场比赛中，他将与多名水友打牌, 并夺得胜利。 他有两种比赛的方式: 同步和异步。 </p><p>假设: </p><ul><li>24个对手</li><li>卢本伟在5秒内打出1次牌</li><li>每局游戏平均每人要打出30次牌(总共一局60次)</li></ul><p><strong>Synchronous version</strong>(同步版本):  卢本伟1次玩1局斗地主，永远不要同时玩两个，直到游戏结束。 每场比赛需时(55 + 5) * 30==1800秒，或者说30分钟。 整个比赛历时24 * 30==720分钟，也就是<strong>12小时</strong>。</p><p><strong>Asynchronous version</strong>(异步版本):  卢本伟从一张比赛桌移动到另一张比赛桌，每个桌子移动一次。 当他离开桌子的时候，让水友在等待期间采取下一步行动。 24场比赛中每遍历一次需要卢本伟24 * 5==120秒，或2分钟。 整场斗地主争霸赛现在缩短到120 * 30==3600秒，或者只有<strong>1个小时</strong>。 </p></blockquote><p>只有一位卢本伟，他只有一双手，一次只能移动打一次牌。 但是在赛场不停地切换比赛座, 让时间从12小时减少到了1小时。 因此， cooperative multitasking(协同多任务)是一种fancy的说法，即程序的事件循环(稍后再详述)与多个任务通信，让每个任务在最佳时间轮流运行。 </p><p> Async IO 需要很长的等待时间，否则函数会被阻塞，并允许其他函数在停机期间运行。 (阻塞函数有效地阻止其他函数从启动到返回的时间内运行。) </p><h2 id="asyncio-模块-和-async-await"><a href="#asyncio-模块-和-async-await" class="headerlink" title="asyncio 模块 和 async/await"></a>asyncio 模块 和 async/await</h2><p>现在您已经了解了async IO 设计的一些背景知识，接下来让我们探索 Python 的实现。 Python 的 asyncio 包(在 Python 3.4中引入)及其两个关键字 async 和 await 可以达到不同的目的，但是它们一起可以帮助您声明、构建、执行和管理异步代码。</p><h3 id="关于-async-await-的语法-和-Native-Coroutines-本地协程"><a href="#关于-async-await-的语法-和-Native-Coroutines-本地协程" class="headerlink" title="关于 async/await 的语法 和 Native Coroutines(本地协程)"></a>关于 async/await 的语法 和 Native Coroutines(本地协程)</h3><blockquote><p><strong>A Word of Caution</strong>:</p><p>小心你在网上读到的东西。 async IO API 已经从 Python 3.4迅速发展到 Python 3.7。 一些旧的模式已经不再使用，一些最初被禁止的东西现在可以通过新的引入来使用。 本笔记也将很快加入过时的垃圾桶。 - 2020-1-6 17:52:02</p></blockquote><p>async IO  的核心是 coroutines (协同程序)。 coroutines 是 Python 生成器函数的特殊版本。 让我们从一个 baseline(基础版本)定义开始，然后在这里进行构建: 协同程序是一个函数，它可以在到达 return 之前暂停执行，并且可以间接地将控制权传递给另一个 coroutine 一段时间。 </p><p> 稍后，你将更深入地了解传统生成器到底是如何重新用于协同程序的。 目前，了解协同程序如何工作的最简单方法是开始制作一些协同程序。 </p><h4 id="asyncio-API"><a href="#asyncio-API" class="headerlink" title="asyncio API"></a>asyncio API</h4><p>下面介绍   <code>asyncio</code>   模块最主要的几个API。注意，必须使用 Python 3.7 或更高版本，早期的语法已经变了。</p><p> 第一步，<code>import</code> 加载 <code>asyncio</code> 模块。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br></pre></td></tr></table></figure><p>第二步，函数前面加上 <code>async</code> 关键字，就变成了 async 函数。这种函数最大特点是执行可以暂停，交出执行权。</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>第三步，在 async 函数内部的异步任务前面，加上<code>await</code>命令。</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>asyncio.sleep(1)</code> 方法可以生成一个异步任务，休眠1秒钟然后结束。</p><p>执行引擎遇到<code>await</code>命令，就会在异步任务开始执行之后，暂停当前 async 函数的执行，把执行权交给其他任务。<strong>等到异步任务结束</strong>，再把执行权交回 async 函数，<strong>继续</strong>往下执行。</p><p>第四步，<code>async.run()</code> 方法加载 async 函数，启动事件循环。</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; asyncio.run(main())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>asyncio.run()</code> 在<strong>事件循环</strong>上监听 async 函数<code>main</code>的执行。等到 <code>main</code> 执行完了，事件循环才会终止。</p><blockquote><p>asyncio 模块在单线程上启动一个事件循环（event loop），时刻监听新进入循环的事件，加以处理，并不断重复这个过程，直到异步任务结束。事件循环的内部机制，可以参考 <a href="https://wangdoc.com/javascript/async/general.html" target="_blank" rel="noopener">JavaScript 的模型</a>，两者是一样的。 </p></blockquote><div align="center"><img src="/2020/01/06/Async-IO-in-Python/2020-1-6-event-loop.jpg"></div><hr><h4 id="async-函数示例"><a href="#async-函数示例" class="headerlink" title="async 函数示例"></a>async 函数示例</h4><p> 让我们采用浸入式方法编写一些异步 IO 代码。 这个简短的程序是 async IO 的 Hello World，但是在说明其核心功能方面还有很长的路要走: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># count_async.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"One"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Two"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(count(), count(), count())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    s = time.perf_counter()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    elapsed = time.perf_counter() - s</span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;__file__&#125;</span> executed in <span class="subst">&#123;elapsed:<span class="number">0.2</span>f&#125;</span> seconds."</span>)</span><br></pre></td></tr></table></figure><p>上面脚本中，在 async 函数<code>main</code>的里面，<code>asyncio.gather()</code> 方法将多个异步任务（三个 <code>count()</code>）包装成一个新的异步任务，必须等到内部的多个异步任务都执行结束，这个新的异步任务才会结束。</p><p>脚本的运行结果如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python3 count_async.py</span><br><span class="line">One</span><br><span class="line">One</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Two</span><br><span class="line">Two</span><br><span class="line">count_async.py executed in 1.01 seconds.</span><br></pre></td></tr></table></figure><p>上面运行结果的原因是，三个 <code>count()</code> 依次执行，打印完 <code>One</code>，就休眠1秒钟，把执行权交给下一个 <code>count()</code>，所以先连续打印出三个 <code>One</code>。等到1秒钟休眠结束，执行权重新交回第一个 <code>count()</code>，开始执行 <code>await</code> 命令下一行的语句，所以会接着打印出三个<code>Two</code>。脚本总的运行时间是1秒。</p><p>这个输出的顺序是异步 IO 的核心。 对 count ()的每个调用进行通信是单个事件循环或协调器。 当每个任务到达并等待 asyncio.sleep (1)时，该函数对事件循环大喊，并将控制权交还给它，它说: “我要睡一秒钟。 在此期间，继续做一些有意义的事情。” </p><p>作为对比，下面是这个例子的同步版本 <code>synchronous.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># count_synchronous.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"One"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Two"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        count()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = time.perf_counter()</span><br><span class="line">    main()</span><br><span class="line">    elapsed = time.perf_counter() - s</span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;__file__&#125;</span> executed in <span class="subst">&#123;elapsed:<span class="number">0.2</span>f&#125;</span> seconds."</span>)</span><br></pre></td></tr></table></figure><p> 执行时，顺序和执行时间会有一个细微但关键的变化: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python3 count_synchronous.py</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">count_synchronous.py executed in 3.01 seconds.</span><br></pre></td></tr></table></figure><p>虽然使用 time.sleep ()和 asyncio.sleep ()可能看起来很老套，但它们被用作任何涉及等待时间的时间密集型进程的替代品。 (你可以等待的最平凡的事情就是一个基本上什么都不做的睡眠调用。) 也就是说，<strong>time.sleep ()可以表示任何耗时的阻塞函数调用，而 asyncio.sleep ()用于代替非阻塞调用(但也需要一些时间才能完成)。</strong> </p><p> 正如你将在下一节中看到的，等待包括 asyncio.sleep ()在内的内容的好处是，周围的函数可以暂时将控制权交给另一个更容易立即执行某些操作的函数。 相比之下，time.sleep ()或任何其他阻塞调用都与异步 Python 代码不兼容，因为它会在休眠期间停止一切。 </p><h3 id="Async-IO的规则"><a href="#Async-IO的规则" class="headerlink" title="Async IO的规则"></a>Async IO的规则</h3><p>在这里, 一个关于 <code>async</code>, <code>await</code>,  和<code>coroutine functions</code> 的更加正式的定义是它们在创建的时候是有序的</p><ul><li>语法  <code>async def</code>  引入了一个 <strong>native coroutine(本地协程)</strong> 或者说一个  <strong>asynchronous generator(异步生成器)</strong> , 而表达式  <code>async with</code> 和 <code>async for</code> 也是合法的, 稍后你会看到它们</li><li>关键字 <code>await</code> 将函数控制传递回 event loop(事件循环)。 (它暂停执行周围的协同程序。) 如果 Python 遇到 <code>g ()</code>范围内的 <code>await f ()</code>表达式，这就是 await 告诉事件循环，“暂停 <code>g ()</code>的执行，直到返回我正在等待的 <code>f ()</code>的结果。 与此同时，让其它部分依旧运行。” </li></ul><p>在代码中，第二个要点看起来大致如下: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Pause here and come back to g() when f() is ready</span></span><br><span class="line">    r = <span class="keyword">await</span> f()</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p> 对于何时以及如何使用 async / await，还有一套严格的规则。 无论你是否还在学习语法，或者已经接触过使用 async / await，这些方法都很方便: </p><ul><li><p>使用 <code>async def</code> 引入的函数是 coroutine。 它可以使用<code>await</code>, <code>return</code>, 或者 <code>yield</code>，但所有这些都是可选的。 声明 <code>async def noop () : pass</code> 是合法的:</p><ul><li>使用  <code>await</code> and/or <code>return</code>  创建一个 coroutine 函数。 要调用协同程序函数，必须 <code>await</code>  它去获取它的结果。 </li><li>在 <code>async def</code> 块中使用 <code>yield</code> 不太常见(而且最近在 Python 中才是合法的)。 这将创建一个<a href="https://www.python.org/dev/peps/pep-0525/" target="_blank" rel="noopener">异步生成器</a>，您可以使用  <code>async for</code>  对其进行迭代。 暂时忘记异步生成器，专注于认真对待 coroutine 函数的语法，这些函数使用 <code>await</code> and/or <code>return</code>。 </li><li>任何使用 <code>async def</code> 定义的内容都不能使用 <code>yield from</code>，这将引发 <code>SyntaxError</code> 错误。</li></ul></li><li><p>就像在  <code>def</code>  函数之外使用 yield 是  <code>SyntaxError</code>  一样，在 <code>async def</code> coroutine 之外使用  <code>await</code>  也是  <code>SyntaxError</code>  。 你只能在协同程序的主体(body)中使用 <code>await</code>  。 </p><p>以下是一些简短的例子，旨在总结上述几条规则: </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    y = <span class="keyword">await</span> z(x)  <span class="comment"># OK - `await` and `return` allowed in coroutines</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> x  <span class="comment"># OK - this is an async generator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> gen(x)  <span class="comment"># No - SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(x)</span>:</span></span><br><span class="line">    y = <span class="keyword">await</span> z(x)  <span class="comment"># Still no - SyntaxError (no `async def` here)</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>最后, 当你使用 <code>await f()</code>的时候, <code>f()</code>必须是一个 <a href="https://docs.python.org/3/reference/datamodel.html#awaitable-objects" target="_blank" rel="noopener">awaitable</a> 的对象.<br>啥? 这没什么卵用?<br>现在你只需知道一个awaitable的对象必须是(1)另一个coroutine, 或者是(2)一个定义了 <code>.__await__()</code>dunder方法而且返回一个迭代器的对象。<br>如果您正在编写一个程序，对于大多数目的来说，您只需要担心(1)类情况。</p><p>这又给我们带来了另一个技术上的区别，您可能会看到它的弹出: 将函数标记为 coroutine 的一种较老的方法是使用@asyncio 来装饰一个普通的 def 函数。 协同作用。 结果是一个基于生成器的协同程序( <strong>generator-based coroutine</strong> )。 由于在 Python 3.5中使用了 async / await 语法，这种结构已经过时。 </p><p>这两个 协程 基本上是等价的(两者都是 awaitable ) ，但第一个协程是基于生成器的( <strong>generator-based</strong> )，而第二个协程是本地协同程序(<strong>native coroutine</strong>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">py34_coro</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Generator-based coroutine, older syntax"""</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> stuff()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">py35_coro</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Native coroutine, modern syntax"""</span></span><br><span class="line">    <span class="keyword">await</span> stuff()</span><br></pre></td></tr></table></figure><p>如果您自己编写任何代码，为了显式而不是隐式( explicit rather than implicit )，请选择 native coroutines。 基于生成器的协程将在 Python 3.10中删除(  <a href="https://docs.python.org/3/library/asyncio-task.html#generator-based-coroutines" target="_blank" rel="noopener">removed</a>)。 </p><p>在本笔记的后半部分，我们将仅仅为了解释而涉及一点点基于生成器的协程。 之所以引入 async / await，是为了使协同程序成为 Python 的一个独立特性，可以轻松地将其与普通的生成器函数区分开来，从而减少模糊性。 </p><p>不要陷入基于生成器的协同程序，这些协同程序已经被 async / await 故意过时(  <a href="https://www.python.org/dev/peps/pep-0492/#rationale-and-goals" target="_blank" rel="noopener">deliberately outdated</a> )了。 它们有自己的小规则集(例如，<code>await</code> 不能用于基于生成器的协同程序) ，如果坚持使用 async / await 语法，那么这些规则在很大程度上是不相关的。 </p><p>我们来看一些更复杂的栗子。</p><p>这里有一个关于 async IO 如何减少等待时间的栗子:   给定一个 coroutine, 维持(maintain)一个持续产生在range[0, 10]之间随机整数的  <code>makerandom()</code> 函数,  直到其中一个超过<strong>阈值(threshold)</strong>为止 。 </p><p>你希望让这个 coroutine 的多个调用不需要相互等待连续地完成。 您可以基本上遵循上面两个脚本中的模式，只需稍作修改: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># rand.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># ANSI colors</span></span><br><span class="line">c = (</span><br><span class="line">    <span class="string">"\033[0m"</span>,   <span class="comment"># End of color</span></span><br><span class="line">    <span class="string">"\033[36m"</span>,  <span class="comment"># Cyan</span></span><br><span class="line">    <span class="string">"\033[91m"</span>,  <span class="comment"># Red</span></span><br><span class="line">    <span class="string">"\033[35m"</span>,  <span class="comment"># Magenta</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">makerandom</span><span class="params">(idx: int, threshold: int = <span class="number">6</span>)</span> -&gt; int:</span></span><br><span class="line">    print(c[idx + <span class="number">1</span>] + <span class="string">f"Initiated makerandom(<span class="subst">&#123;idx&#125;</span>)."</span>)</span><br><span class="line">    i = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">while</span> i &lt;= threshold:</span><br><span class="line">        print(c[idx + <span class="number">1</span>] + <span class="string">f"makerandom(<span class="subst">&#123;idx&#125;</span>) == <span class="subst">&#123;i&#125;</span> too low; retrying."</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(idx + <span class="number">1</span>)</span><br><span class="line">        i = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    print(c[idx + <span class="number">1</span>] + <span class="string">f"---&gt; Finished: makerandom(<span class="subst">&#123;idx&#125;</span>) == <span class="subst">&#123;i&#125;</span>"</span> + c[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="keyword">await</span> asyncio.gather(*(makerandom(i, <span class="number">10</span> - i - <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    random.seed(<span class="number">444</span>)</span><br><span class="line">    r1, r2, r3 = asyncio.run(main())</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">f"r1: <span class="subst">&#123;r1&#125;</span>, r2: <span class="subst">&#123;r2&#125;</span>, r3: <span class="subst">&#123;r3&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p> 彩色输出比我能说的要多得多，并且让你了解这个脚本是如何执行的: </p><div align="center"><img src="/2020/01/06/Async-IO-in-Python/asyncio-rand.gif"></div><p>这个程序使用一个main coroutine，<code>makerandom ()</code> ，并且在3个不同的输入端并发地运行它。 大多数程序将包含小的、模块化的协程和一个将每个较小的协程整合在一起的 wrapper函数。 然后使用 <code>main ()</code>通过在一些迭代器或池(pool)之间映射到central coroutine来收集任务(futures)。 </p><p>在这个小栗子中，池(pool)是<code>range (3)</code>。 在后面提供的一个更完整的示例中，它是一组需要被请求、解析和并发处理的 URL，而<code>main ()</code>封装了每个 URL 的整个例程(routine)。 </p><p>虽然“生成随机整数”(比其他任何方法都要 CPU-bound )可能不是  <code>asyncio</code> 的最佳选择，但是在这个示例中，<code>asyncio.sleep ()</code>的出现是为了模拟 IO-bound 的进程，其中涉及不确定的等待时间。 例如，<code>asyncio.sleep ()</code>调用可能表示在消息应用程序中的两个客户机之间发送和接收非随机整数。 </p><h2 id="Async-IO-设计模式"><a href="#Async-IO-设计模式" class="headerlink" title="Async IO 设计模式"></a>Async IO 设计模式</h2><p> Async IO 提供了自己的一组可能的脚本设计，本节将介绍这些设计。 </p><h3 id="Chaining-Coroutines"><a href="#Chaining-Coroutines" class="headerlink" title="Chaining Coroutines"></a>Chaining Coroutines</h3><p>协程的一个关键特性是它们可以链接在一起。 (记住，一个协同程序对象是可以被唤醒的( awaitable )，所以另一个协同程序可以等待 (<code>await</code>) 它。) 这样你就可以把程序分解成更小的、可管理的、可回收的协同程序: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># chained.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">part1</span><span class="params">(n: int)</span> -&gt; str:</span></span><br><span class="line">    i = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    print(<span class="string">f"part1(<span class="subst">&#123;n&#125;</span>) sleeping for <span class="subst">&#123;i&#125;</span> seconds."</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(i)</span><br><span class="line">    result = <span class="string">f"result<span class="subst">&#123;n&#125;</span>-1"</span></span><br><span class="line">    print(<span class="string">f"Returning part1(<span class="subst">&#123;n&#125;</span>) == <span class="subst">&#123;result&#125;</span>."</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">part2</span><span class="params">(n: int, arg: str)</span> -&gt; str:</span></span><br><span class="line">    i = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    print(<span class="string">f"part2<span class="subst">&#123;n, arg&#125;</span> sleeping for <span class="subst">&#123;i&#125;</span> seconds."</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(i)</span><br><span class="line">    result = <span class="string">f"result<span class="subst">&#123;n&#125;</span>-2 derived from <span class="subst">&#123;arg&#125;</span>"</span></span><br><span class="line">    print(<span class="string">f"Returning part2<span class="subst">&#123;n, arg&#125;</span> == <span class="subst">&#123;result&#125;</span>."</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    p1 = <span class="keyword">await</span> part1(n)</span><br><span class="line">    p2 = <span class="keyword">await</span> part2(n, p1)</span><br><span class="line">    end = time.perf_counter() - start</span><br><span class="line">    print(<span class="string">f"--&gt;Chained result<span class="subst">&#123;n&#125;</span> =&gt; <span class="subst">&#123;p2&#125;</span> (took <span class="subst">&#123;end:<span class="number">0.2</span>f&#125;</span> seconds)."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*(chain(n) <span class="keyword">for</span> n <span class="keyword">in</span> args))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    random.seed(<span class="number">444</span>)</span><br><span class="line">    args = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span> <span class="keyword">else</span> map(int, sys.argv[<span class="number">1</span>:])</span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    asyncio.run(main(*args))</span><br><span class="line">    end = time.perf_counter() - start</span><br><span class="line">    print(<span class="string">f"Program finished in <span class="subst">&#123;end:<span class="number">0.2</span>f&#125;</span> seconds."</span>)</span><br></pre></td></tr></table></figure><p> 请仔细关注输出，其中 <code>part1()</code> 睡眠时间可变，  <code>part2()</code> 开始处理可用的结果: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python3 chained.py 9 6 3</span><br><span class="line">part1(9) sleeping for 4 seconds.</span><br><span class="line">part1(6) sleeping for 4 seconds.</span><br><span class="line">part1(3) sleeping for 0 seconds.</span><br><span class="line">Returning part1(3) == result3-1.</span><br><span class="line">part2(3, 'result3-1') sleeping for 4 seconds.</span><br><span class="line">Returning part1(9) == result9-1.</span><br><span class="line">part2(9, 'result9-1') sleeping for 7 seconds.</span><br><span class="line">Returning part1(6) == result6-1.</span><br><span class="line">part2(6, 'result6-1') sleeping for 4 seconds.</span><br><span class="line">Returning part2(3, 'result3-1') == result3-2 derived from result3-1.</span><br><span class="line"><span class="meta">--&gt;</span>Chained result3 =&gt; result3-2 derived from result3-1 (took 4.00 seconds).</span><br><span class="line">Returning part2(6, 'result6-1') == result6-2 derived from result6-1.</span><br><span class="line"><span class="meta">--&gt;</span>Chained result6 =&gt; result6-2 derived from result6-1 (took 8.01 seconds).</span><br><span class="line">Returning part2(9, 'result9-1') == result9-2 derived from result9-1.</span><br><span class="line"><span class="meta">--&gt;</span>Chained result9 =&gt; result9-2 derived from result9-1 (took 11.01 seconds).</span><br><span class="line">Program finished in 11.01 seconds.</span><br></pre></td></tr></table></figure><p> 在这种设置中，<code>main()</code>的运行时间等于它收集并调度的任务的最大运行时间 </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://realpython.com/async-io-python/#python-version-specifics" target="_blank" rel="noopener">Async IO in Python: A Complete Walkthrough</a></li><li><a href="https://realpython.com/python-concurrency/" target="_blank" rel="noopener">Overview of Concurrency in Python</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList Excecises</title>
      <link href="/2020/01/04/array-excecises/"/>
      <url>/2020/01/04/array-excecises/</url>
      
        <content type="html"><![CDATA[<h2 id="Ex1-扫雷游戏"><a href="#Ex1-扫雷游戏" class="headerlink" title="Ex1: 扫雷游戏"></a>Ex1: 扫雷游戏</h2><p>我们来写一个小程序：</p><div align="center"><img src="/2020/01/04/array-excecises/sweeper.jpg" width="200"> </div><p>程序接收三个参数，M，N和p，然后生成一个M * N的矩阵，然后每一个cell(小格子)有p的概率是地雷。生成矩阵后，再计算出每一个cell周围地雷的数量。</p><a id="more"></a><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义生成棋盘函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sweeper</span><span class="params">(m, n, p)</span>:</span></span><br><span class="line">    <span class="comment"># tips: 生成m+2&amp;n+2的初始棋盘来避免边界判断, -1代表雷</span></span><br><span class="line">    board = [[<span class="literal">None</span>] * (n + <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(m + <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            r = random.random()</span><br><span class="line">            board[i][j] = <span class="number">-1</span> <span class="keyword">if</span> r &lt; p <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制棋盘</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">"*"</span>, end=<span class="string">" "</span>) <span class="keyword">if</span> board[i][j] == <span class="number">-1</span> <span class="keyword">else</span> print(<span class="string">"."</span>, end=<span class="string">" "</span>)</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算每个格子的值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] != <span class="number">-1</span>):</span><br><span class="line">                <span class="comment"># 计算四周的地雷数量</span></span><br><span class="line">                <span class="keyword">for</span> ii <span class="keyword">in</span> range(i - <span class="number">1</span>, i + <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> jj <span class="keyword">in</span> range(j - <span class="number">1</span>, j + <span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">if</span> (board[ii][jj] == <span class="number">-1</span>):</span><br><span class="line">                            board[i][j] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">"*"</span>, end=<span class="string">" "</span>) <span class="keyword">if</span> board[i][j] == <span class="number">-1</span> <span class="keyword">else</span> print(board[i][j], end=<span class="string">" "</span>)</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成10x10, 概率p=0.2的扫雷棋盘</span></span><br><span class="line">sweeper(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>展示效果: </p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;. . . . . . . . . . </span><br><span class="line">&gt;. . . . * * . . . * </span><br><span class="line">&gt;. . . . . * * * * . </span><br><span class="line">&gt;. . . . . . * . * . </span><br><span class="line">&gt;. . . . . . . . . . </span><br><span class="line">&gt;. . . . . . . . . * </span><br><span class="line">&gt;. * . . * . * . . . </span><br><span class="line">&gt;. . . . * . . . . . </span><br><span class="line">&gt;. * . * . * . . . * </span><br><span class="line">&gt;* . . . . * . * . . </span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">&gt;<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> * * <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> * </span><br><span class="line">&gt;<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> * * * * <span class="number">3</span> </span><br><span class="line">&gt;<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> * <span class="number">5</span> * <span class="number">2</span> </span><br><span class="line">&gt;<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> </span><br><span class="line">&gt;<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> * </span><br><span class="line">&gt;<span class="number">1</span> * <span class="number">1</span> <span class="number">2</span> * <span class="number">3</span> * <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">&gt;<span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> * <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">&gt;<span class="number">2</span> * <span class="number">2</span> * <span class="number">4</span> * <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> * </span><br><span class="line">&gt;* <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> * <span class="number">3</span> * <span class="number">2</span> <span class="number">1</span> </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>tips: 第7行代码是精髓, 有很多时候可以通过简单的方法来避免繁琐的边界判断过程</p><h2 id="Ex2-矩阵0变换"><a href="#Ex2-矩阵0变换" class="headerlink" title="Ex2: 矩阵0变换"></a>Ex2: 矩阵0变换</h2><p>给一个m×n的矩阵，如果有一个元素为0，则把该元素对应的行与列所有元素全部变成0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [  [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ] ]</span><br></pre></td></tr></table></figure><p>也就是变成这样 ↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix =[ [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">          [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>] ]</span><br></pre></td></tr></table></figure><p>思路1: 先想第一种, 我再去创建一个 m×n 的 数组(matrix), 然后这个数组里面专门存0的位置, 就是把0的位置设置为True; </p><blockquote><p>这种方法需要用到额外mxn的空间→空间复杂度O(m×n)</p></blockquote><p>思路2: 用set, 一个放行, 一个放列; </p><blockquote><p>当然可以, 不过这个题先用列表来做</p></blockquote><p>思路3: 我们是否需要维持(maintain)一个 m×n 的数组? 是可以不需要的; 只需要两个一维数组就够了, 一个maintain哪些列有0, 另一个maintain哪些行有0;</p><blockquote><p>这种方法的空间复杂度为O(m+n) →space complexity</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    m = [<span class="literal">None</span>] * len(matrix)  <span class="comment"># 行</span></span><br><span class="line">    n = [<span class="literal">None</span>] * len(matrix[<span class="number">0</span>])  <span class="comment"># 列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix)):  <span class="comment"># 遍历行</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):  <span class="comment"># 遍历列</span></span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>):  <span class="comment"># 如果出现了0了</span></span><br><span class="line">                m[i] = <span class="number">1</span>  <span class="comment"># 就把这一行设为1</span></span><br><span class="line">                n[j] = <span class="number">1</span>  <span class="comment"># 就把这一列设为1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过m和n两个一位数组, 修改原有矩阵(matrix)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> (m[i] == <span class="number">1</span> <span class="keyword">or</span> n[j] == <span class="number">1</span>):</span><br><span class="line">                matrix[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [  [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ],</span><br><span class="line">            [ <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ] ]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原有matrix</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> matrix:</span><br><span class="line">    print(x, sep=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># 输出</span></span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>↓↓↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改后matrix</span></span><br><span class="line">zero(matrix)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> matrix:</span><br><span class="line">    print(x, sep=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># 输出</span></span><br><span class="line">&gt;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ex3-九宫图"><a href="#Ex3-九宫图" class="headerlink" title="Ex3: 九宫图"></a>Ex3: 九宫图</h2><div align="center"><img src="/2020/01/04/array-excecises/magicsquare.JPG" width="150"> </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">magic_square</span><span class="params">(n)</span>:</span></span><br><span class="line">    magic = [[<span class="number">0</span>] * (n) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    row = n - <span class="number">1</span></span><br><span class="line">    col = n//<span class="number">2</span></span><br><span class="line">    magic[row][col] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n * n + <span class="number">1</span>):</span><br><span class="line">        try_row = (row + <span class="number">1</span>) % n</span><br><span class="line">        try_col = (col + <span class="number">1</span>) % n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (magic[try_row][try_col] == <span class="number">0</span>):</span><br><span class="line">            row = try_row</span><br><span class="line">            col = try_col</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># row往上移1行, 有可能会产生负数, 所以+n</span></span><br><span class="line">            row = (row - <span class="number">1</span> + n) % n  </span><br><span class="line">        </span><br><span class="line">        magic[row][col] = i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> magic:</span><br><span class="line">        print(x, sep=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magic_square(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># 输出</span></span><br><span class="line">&gt;[<span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line">&gt;[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">&gt;[<span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magic_square(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># 输出</span></span><br><span class="line">&gt;[<span class="number">11</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">9</span>]</span><br><span class="line">&gt;[<span class="number">10</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">3</span>]</span><br><span class="line">&gt;[<span class="number">4</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="number">22</span>]</span><br><span class="line">&gt;[<span class="number">23</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line">&gt;[<span class="number">17</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>find the missing number</title>
      <link href="/2020/01/04/find-the-missing-number/"/>
      <url>/2020/01/04/find-the-missing-number/</url>
      
        <content type="html"><![CDATA[<h2 id="Question-找到丢失的数字"><a href="#Question-找到丢失的数字" class="headerlink" title="Question: 找到丢失的数字"></a>Question: 找到丢失的数字</h2><p>现在你手上有n-1个数字, 这些数字的范围是[1, n]且这n-1个数字中没有重复的数字.<br>由上述条件可知: 你手上的数字丢失了一个.<br>请编写一段高效的找到该确实数字的代码.</p><a id="more"></a><p><strong>考察需求</strong></p><p>​    首先你应该要对面试官问的这道题的需求, 在这里就是这个数字列表是有序的还是无序的? 那么你问了面试官之后呢, 面试就告诉你了, 这就是一个良好的开始.</p><p><strong>考察思路</strong>: </p><ul><li>首先需要问清楚题目意思<ul><li>这个数字列表是有序的还是无序的? </li></ul></li><li>考虑各种方法的时间复杂度, 空间复杂度</li><li>算法的思路<ul><li>第一步应该怎么做</li><li>第二步应该怎么做</li></ul></li><li>程序实现<ul><li>能不能写出一些测试用例, test_case, 用我们写好的程序跑过去?</li></ul></li></ul><h3 id="实现思路-5种"><a href="#实现思路-5种" class="headerlink" title="实现思路(5种)"></a><strong>实现思路(5种)</strong></h3><h4 id="第1种-先排序-再用二分法"><a href="#第1种-先排序-再用二分法" class="headerlink" title="第1种: 先排序, 再用二分法"></a><strong>第1种: 先排序, 再用二分法</strong></h4><ul><li><p>使用二分法</p></li><li><ul><li>这就涉及到<strong>我们的List是有序的还是无序的?</strong></li></ul></li><li><p>先排序, 再用二分法</p></li><li><ul><li>这就涉及到各种排序算法的优劣性</li><li>List.sort()或者sorted(List)</li></ul></li></ul><h4 id="第2种-先排序-再用线性的查找方式"><a href="#第2种-先排序-再用线性的查找方式" class="headerlink" title="第2种: 先排序, 再用线性的查找方式"></a><strong>第2种: 先排序, 再用线性的查找方式</strong></h4><ul><li>也就是for循环呗, 每次看这个 i 等不等于上一个 i+1</li><li>不等于的话就把当前的 i 打印出来</li></ul><h4 id="第3种-先求和-速度非常快"><a href="#第3种-先求和-速度非常快" class="headerlink" title="第3种: 先求和(速度非常快)"></a><strong>第3种: 先求和(速度非常快)</strong></h4><ul><li><p>首先我们是缺少了一个数字对不对?</p></li><li><ul><li>我们可以把这些数字加起来, 求和, 记为 sum_now</li></ul></li><li><p>然后如果我们 1~n 的数字都存在的话, 原本的1到n的累加和我们是不是已经知道了</p></li><li><ul><li>也就是 (1+n) * n / 2</li><li>(首相+末项) × 项数 ÷ 2 </li><li>记为 sum_all</li></ul></li><li><p>那么 sum_all - sum_now 就能得出我们缺失的那个数字</p></li></ul><h4 id="第4种-计数排序"><a href="#第4种-计数排序" class="headerlink" title="第4种: 计数排序"></a><strong>第4种: 计数排序</strong></h4><ul><li><p>可以理解为现在我们有 n 个抽屉, 编号 1~n 号</p></li><li><p>然后我们遇到一个数字, 就把这个数字放到抽屉里面去</p></li><li><ul><li>这个是5我们放到第5个抽屉</li><li>这个是8我们放到第8个抽屉</li></ul></li><li><p>当所有数过完一遍后, 我们看那个抽屉是空的, 我们是不是就知道哪个数缺失了</p></li></ul><h4 id="第5种-XOR-异或"><a href="#第5种-XOR-异或" class="headerlink" title="第5种: XOR 异或"></a><strong>第5种: XOR 异或</strong></h4><p><strong>(速度是最快的, 异或操作比加减乘除都要快, 因为计算机是要做加减乘除的时候要先转换成二进制再进行计算, 所以直接在二进制层面上的异或操作是最快的)</strong></p><ul><li><p><strong>0^1 = 1</strong></p><p><strong>0^0 = 0</strong></p><p><strong>1^0 = 1</strong></p><p><strong>1^1 = 0</strong></p></li><li><p><strong>A^A = 0</strong></p><p><strong>A^0 = A</strong></p></li><li><p>a⊕b = (¬a ∧ b) ∨ (a ∧¬b)</p></li><li><p>如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。</p></li><li><p>支持交换律</p></li><li><ul><li><strong>A^B^C = C^B^A = …</strong></li></ul></li></ul><p>计算机中数的运算转换成二进制进行的, 比如说我们的 3 转换成二进制就是 0011, 8 转换成二进制就是 1000</p><p>做法:</p><ul><li><p>我们先拿 1异或2一直异或到n</p></li><li><ul><li>1^2^3^4^…^n</li></ul></li><li><p>再和我们的乱序List的异或作比较</p></li><li><ul><li>a0 ^  a1 ^  a2 ^ …^ 0 ^ … ^  an-2</li></ul></li></ul><div align="center"><img src="/2020/01/04/find-the-missing-number/xor_example.png"></div><p>1,2,3,…异或下面的都得到0, 只剩 x 异或下面的 0(因为那个数已经缺失了, 所以是0), 得到 x</p><p>那么这个 x 就是我们丢失的数字</p><p><strong>tips:</strong></p><p>98765 * 32</p><p>等同于</p><p>98765 * 2^5</p><p>等同于在二进制上左移5位-&gt; <strong>位操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">98765</span>&lt;&lt;<span class="number">5</span></span><br></pre></td></tr></table></figure><p>是一样的</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(Python)</title>
      <link href="/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(Python)/"/>
      <url>/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(Python)/</url>
      
        <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a><font color="#E16B8C">Info</font></h2><p>从头开始用Python实现基础数据结构与算法, 在Gitbook更新<a href="https://yonghuachan.gitbook.io/data_structure_with_python/" target="_blank" rel="noopener">学习笔记</a>, Mark一下~</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> DataStructure </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python中yield的用法详解[转载]</title>
      <link href="/2019/08/16/yield_in_python/"/>
      <url>/2019/08/16/yield_in_python/</url>
      
        <content type="html"><![CDATA[<p>原文作者吐槽: </p><blockquote><p>首先我要吐槽一下，看程序的过程中遇见了yield这个关键字，然后百度的时候，发现没有一个能简单的让我懂的，讲起来真TM的都是头头是道，什么参数，什么传递的，还口口声声说自己的教程是最简单的，最浅显易懂的，我就想问没有有考虑过读者的感受。</p></blockquote><a id="more"></a><p>接下来是正题：</p><p>首先，如果你还没有对yield有个初步分认识，那么你先把yield看做“return”，这个是直观的，它首先是个return，普通的return是什么意思，就是在程序中返回某个值，返回之后程序就不再往下运行了。看做return之后再把它看做一个是生成器（generator）的一部分（带yield的函数才是真正的迭代器），好了，如果你对这些不明白的话，那先把yield看做return,然后直接看下面的程序，你就会明白yield的全部意思了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"starting..."</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        print(<span class="string">"res:"</span>,res)</span><br><span class="line">g = foo()</span><br><span class="line">print(next(g))</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">print(next(g))</span><br></pre></td></tr></table></figure><p>就这么简单的几行代码就让你明白什么是yield，代码的输出这个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting...</span><br><span class="line"><span class="number">4</span></span><br><span class="line">********************</span><br><span class="line">res: <span class="literal">None</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>我直接解释代码运行顺序，相当于代码单步调试：<br>1.程序开始执行以后，因为foo函数中有yield关键字，所以foo函数并不会真的执行，而是先得到一个生成器g(相当于一个对象)<br>2.直到调用next方法，foo函数正式开始执行，先执行foo函数中的print方法，然后进入while循环<br>3.程序遇到yield关键字，然后把yield想想成return,return了一个4之后，程序停止，并没有执行赋值给res操作，此时next(g)语句执行完成，所以输出的前两行（第一个是while上面的print的结果,第二个是return出的结果）是执行print(next(g))的结果，<br>4.程序执行print(“<em>“</em>20)，输出20个*<br>5.又开始执行下面的print(next(g)),这个时候和上面那个差不多，不过不同的是，这个时候是从刚才那个next程序停止的地方开始执行的，也就是要执行res的赋值操作，这时候要注意，这个时候赋值操作的右边是没有值的（因为刚才那个是return出去了，并没有给赋值操作的左边传参数），所以这个时候res赋值是None,所以接着下面的输出就是res:None,<br>6.程序会继续在while里执行，又一次碰到yield,这个时候同样return 出4，然后程序停止，print函数输出的4就是这次return出的4.<br> <br><strong>到这里你可能就明白yield和return的关系和区别了，带yield的函数是一个生成器，而不是一个函数了，这个生成器有一个函数就是next函数，next就相当于“下一步”生成哪个数，这一次的next开始的地方是接着上一次的next停止的地方执行的，所以调用next的时候，生成器并不会从foo函数的开始执行，只是接着上一步停止的地方开始，然后遇到yield后，return出要生成的数，此步就结束。</strong><br><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"starting..."</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        print(<span class="string">"res:"</span>,res)</span><br><span class="line">g = foo()</span><br><span class="line">print(next(g))</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">print(g.send(<span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>再看一个这个生成器的send函数的例子，这个例子就把上面那个例子的最后一行换掉了，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting...</span><br><span class="line"><span class="number">4</span></span><br><span class="line">********************</span><br><span class="line">res: <span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>先大致说一下send函数的概念：此时你应该注意到上面那个的紫色的字，还有上面那个res的值为什么是None，这个变成了7，到底为什么，这是因为，send是发送一个参数给res的，因为上面讲到，return的时候，并没有把4赋值给res，下次执行的时候只好继续执行赋值操作，只好赋值为None了，而如果用send的话，开始执行的时候，先接着上一次（return 4之后）执行，先把7赋值给了res,然后执行next的作用，遇见下一回的yield，return出结果后结束。<br> <br>5.程序执行g.send(7)，程序会从yield关键字那一行继续向下运行，send会把7这个值赋值给res变量<br>6.由于send方法中包含next()方法，所以程序会继续向下运行执行print方法，然后再次进入while循环<br>7.程序执行再次遇到yield关键字，yield会返回后面的值后，程序再次暂停，直到再次调用next方法或send方法。<br> <br> <br> <br>这就结束了，说一下，为什么用这个生成器，是因为如果用List的话，会占用更大的空间，比如说取0,1,2,3,4,5,6…………1000<br>你可能会这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    a=n</span><br></pre></td></tr></table></figure><p>这个时候range(1000)就默认生成一个含有1000个数的list了，所以很占内存。<br>这个时候你可以用刚才的yield组合成生成器进行实现，也可以用xrange(1000)这个生成器实现<br>yield组合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(num):</span><br><span class="line">    print(&quot;starting...&quot;)</span><br><span class="line">    while num&lt;10:</span><br><span class="line">        num=num+1</span><br><span class="line">        yield num</span><br><span class="line">for n in foo(0):</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">starting...</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>xrange(1000):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for n in xrange(1000):</span><br><span class="line">    a=n</span><br></pre></td></tr></table></figure><p>其中要注意的是python3时已经没有xrange()了，在python3中，range()就是xrange()了，你可以在python3中查看range()的类型，它已经是个&lt;class ‘range’&gt;了，而不是一个list了，毕竟这个是需要优化的。 </p><p>本文章遵循 CC 4.0 by-sa 版权协议，转载请附上原文出处链接和本声明。<br>原文链接：<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856" target="_blank" rel="noopener">https://blog.csdn.net/mieleizhi0522/article/details/82142856</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kNN算法的DIY实现(仿照scikit-learn)</title>
      <link href="/2019/08/15/Do-it-yourself-implementation-of-kNN-algorithm/"/>
      <url>/2019/08/15/Do-it-yourself-implementation-of-kNN-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是kNN算法"><a href="#什么是kNN算法" class="headerlink" title="什么是kNN算法?"></a><font color="#E16B8C">什么是kNN算法?</font></h2><p>kNN算法, 又叫K最近邻算法, 可用于分类或者回归. 所谓K最近邻，就是k个最近的邻居的意思，说的是每个样本都可以用它最接近的k个邻居来代表。</p><a id="more"></a><p>其特点是: </p><ul><li>思想极度简单</li><li>应用数学知识几乎为零</li><li>效果好</li><li>可以解释机器学习算法使用过程中的很多细节问题</li><li>更完整刻画一起学习应用的流程</li><li>分类精度高, 对缺失值不敏感</li><li>懒加载, 模型复杂度高</li></ul><h2 id="kNN算法执行流程"><a href="#kNN算法执行流程" class="headerlink" title="kNN算法执行流程"></a><font color="#E16B8C">kNN算法执行流程</font></h2><ol><li>根据欧几里得距离公式求出样本点与所有点的距离, </li><li>然后按照距离升序排序, 取出前k个点, </li><li>样本点是什么类别, 那么k个点就是什么类别</li></ol><p><strong>kNN的实质: k个样本如果足够地相似的话, 那么他们就很有可能属于同一个类别</strong></p><h2 id="自己动手实现kNN算法"><a href="#自己动手实现kNN算法" class="headerlink" title="自己动手实现kNN算法"></a><font color="#E16B8C">自己动手实现kNN算法</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kNN_classify</span><span class="params">(k, X_train, y_train, x)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= k &lt;= X_train.shape[<span class="number">0</span>], <span class="string">"k must be valid"</span></span><br><span class="line">    <span class="keyword">assert</span> X_train.shape[<span class="number">0</span>] == y_train.shape[<span class="number">0</span>], \</span><br><span class="line">        <span class="string">"the size of X_train must equal to the size of y_train"</span></span><br><span class="line">    <span class="keyword">assert</span> X_train.shape[<span class="number">1</span>] == x.shape[<span class="number">0</span>], \</span><br><span class="line">        <span class="string">"the feature number of x must be equal to X_train"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    distances = [sqrt(np.sum((x_train - x)**<span class="number">2</span>)) <span class="keyword">for</span> x_train <span class="keyword">in</span> X_train]</span><br><span class="line">    nearest = np.argsort(distances)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    topK_y = [y_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> nearest[:k]]</span><br><span class="line">    votes = Counter(topK_y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> votes.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Python </category>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Blog</title>
      <link href="/2019/08/14/first-blog/"/>
      <url>/2019/08/14/first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Start-gt-3W-amp-1H"><a href="#Start-gt-3W-amp-1H" class="headerlink" title="Start -&gt; 3W&amp;1H?"></a><font color="#E16B8C">Start -&gt; 3W&amp;1H?</font></h1><h3 id="你是谁-Who"><a href="#你是谁-Who" class="headerlink" title="你是谁? (Who)"></a><font color="#E16B8C">你是谁? (Who)</font></h3><p>我是Yukirito, 一个兴趣使然的小朋友  </p><a id="more"></a><h3 id="为什么要做Blog-Why"><a href="#为什么要做Blog-Why" class="headerlink" title="为什么要做Blog? (Why)"></a><font color="#E16B8C">为什么要做Blog? (Why)</font></h3><p>大约是3个月前, 我在尝试理解支持向量机的时候, 刷到了<a href="http://freemind.pluskid.org/" target="_blank" rel="noopener">pluskid</a>大神的Blog, 感到十分愉悦. Blog不像社交媒体, 输出碎片化信息. 而是类似于书籍的子集. 按所含信息量多少来举例, 书籍&gt;Blog&gt;朋友圈, 所以Blog比较好输出较为结构化的信息.  By the way, 不要企图用碎片化的知识来提升自己的技术能力</p><h3 id="这个Blog是搞什么的-What"><a href="#这个Blog是搞什么的-What" class="headerlink" title="这个Blog是搞什么的? (What)"></a><font color="#E16B8C">这个Blog是搞什么的? (What)</font></h3><p>自己之前一直是在印象笔记上做笔记, 现在将逐步把闭门的数据选择后转移到Blog上来<br>包括但不限于: </p><ul><li>主业CS学习笔记</li><li>副业各种点歪了技能书的学习笔记</li><li>游戏攻略</li><li>个人心得</li></ul><h3 id="这个Blog是搞什么的-What-1"><a href="#这个Blog是搞什么的-What-1" class="headerlink" title="这个Blog是搞什么的? (What)"></a><font color="#E16B8C">这个Blog是搞什么的? (What)</font></h3><p>2019-08-14 22:18:24</p><blockquote><p>emmmm还没开始更就有鸽的预感…原则上来说更新间隔不大于一周.   </p></blockquote><p>2020-01-05 02:48:37</p><blockquote><p>okkk, 没有原则, 一拖就拖了3个月</p><p>其实是当时忙着找工作, 最近稳定了就”重操旧业”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
